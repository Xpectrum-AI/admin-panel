name: Security Scanning

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run npm audit
        run: |
          cd frontend && npm audit --audit-level moderate
          # Backend audit commented out - frontend only
          # cd ../backend && npm audit --audit-level moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Bandit (Python security scanner)
        run: |
          pip install bandit
          cd python-cdk-v2
          bandit -r . -f json -o bandit-report.json || true

      - name: Run ESLint security rules
        run: |
          cd frontend && npm run lint:security || true
          # Backend security linting commented out - frontend only
          # cd ../backend && npm run lint:security || true

      - name: Check for secrets in code
        run: |
          # Check for hardcoded secrets
          if grep -r "password\|secret\|key" --include="*.js" --include="*.ts" --include="*.py" . | grep -v "node_modules" | grep -v ".git"; then
            echo "Potential secrets found in code"
            exit 1
          fi

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            python-cdk-v2/bandit-report.json
            frontend/audit-report.json
            # backend/audit-report.json - commented out since backend is not used
          retention-days: 30

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for vulnerable dependencies
        run: |
          cd frontend && npm audit --audit-level high
          # Backend audit commented out - frontend only
          # cd ../backend && npm audit --audit-level high

      - name: Check for outdated packages
        run: |
          cd frontend && npm outdated
          # Backend outdated check commented out - frontend only
          # cd ../backend && npm outdated

  container-security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: us-east-1

      - name: Scan container images
        run: |
          # Scan frontend image
          docker build -t frontend-scan ./frontend
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image frontend-scan
          
          # Backend image scan commented out - frontend only
          # docker build -t backend-scan ./backend
          # docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image backend-scan

  notify-security:
    needs: [security-scan, dependency-check, container-security]
    runs-on: ubuntu-latest
    if: always()
    steps:
      # Slack notifications commented out - optional
      # - name: Notify Slack - Security Scan Results
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     channel: '#security'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     text: |
      #       ðŸ”’ Security Scan Results
      #       Branch: ${{ github.ref_name }}
      #       Commit: ${{ github.sha }}
      #       CodeQL: ${{ needs.security-scan.result }}
      #       Dependencies: ${{ needs.dependency-check.result }}
      #       Containers: ${{ needs.container-security.result }}
      #       Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} 