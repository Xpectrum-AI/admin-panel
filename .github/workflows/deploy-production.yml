name: Deploy to Production

on:
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  ACCOUNT_ID: 503561436224

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Pull and retag Frontend image from Release
      run: |
        # Set ECR repository URI
        REPO="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/admin-panel"
        
        # Pull the latest release image
        docker pull $REPO:frontend-release-latest
        
        # Retag as production latest and push
        docker tag $REPO:frontend-release-latest $REPO:frontend-latest
        docker push $REPO:frontend-latest

    - name: Setup Python for CDK
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install CDK dependencies
      run: |
        cd python-cdk-v2
        pip install -r requirements.txt

    - name: Install AWS CDK
      run: |
        npm install -g aws-cdk

    - name: Deploy CDK stack (production)
      env:
        # Pass GitHub environment variables to CDK
        PRODUCTION_NEXT_PUBLIC_PROPELAUTH_API_KEY: ${{ secrets.PRODUCTION_NEXT_PUBLIC_PROPELAUTH_API_KEY }}
        PRODUCTION_NEXT_PUBLIC_API_KEY: ${{ secrets.PRODUCTION_NEXT_PUBLIC_API_KEY }}
        PRODUCTION_GOOGLE_CLIENT_ID: ${{ secrets.PRODUCTION_GOOGLE_CLIENT_ID }}
        PRODUCTION_MONGODB_URL: ${{ secrets.PRODUCTION_MONGODB_URL }}
        PRODUCTION_STRIPE_PUBLISHABLE_KEY: ${{ secrets.PRODUCTION_STRIPE_PUBLISHABLE_KEY }}
        PRODUCTION_SECRET_KEY: ${{ secrets.PRODUCTION_SECRET_KEY }}
        PRODUCTION_PROPELAUTH_API_KEY: ${{ secrets.PRODUCTION_PROPELAUTH_API_KEY }}
        PRODUCTION_PROPELAUTH_VERIFIER_KEY: ${{ secrets.PRODUCTION_PROPELAUTH_VERIFIER_KEY }}
        PRODUCTION_PROPELAUTH_REDIRECT_URI: ${{ secrets.PRODUCTION_PROPELAUTH_REDIRECT_URI }}
        PRODUCTION_NEXT_PUBLIC_LIVE_API_URL: ${{ secrets.PRODUCTION_NEXT_PUBLIC_LIVE_API_URL }}
        PRODUCTION_SUPER_ADMIN_ORG_ID: ${{ secrets.PRODUCTION_SUPER_ADMIN_ORG_ID }}
      run: |
        cd python-cdk-v2
        # Deploy to production environment
        timeout 30m cdk deploy AdminPanelProductionStack --require-approval never --context environment=production || {
          echo "CDK deployment timed out or failed"
          echo "Checking ECS service status..."
          aws ecs describe-services \
            --cluster AdminPanelProductionStack-AdminPanelCluster354587DC-WMnszSmI30dz \
            --services AdminPanelProductionStack-AdminPanelService167ECF01-mGcKXTWR0Ntv \
            --region ${{ env.AWS_REGION }} || echo "Could not check ECS status"
          exit 1
        }

    - name: Wait for deployment to complete
      run: |
        # Check if stack exists first
        if aws cloudformation describe-stacks --stack-name AdminPanelProductionStack --region ${{ env.AWS_REGION }} 2>/dev/null; then
          # Wait for ECS services to be stable
          aws ecs wait services-stable \
            --cluster AdminPanelProductionStack-AdminPanelCluster354587DC-WMnszSmI30dz \
            --services AdminPanelProductionStack-AdminPanelService167ECF01-mGcKXTWR0Ntv \
            --region ${{ env.AWS_REGION }} || echo "Services not stable yet"
        else
          echo "Stack does not exist yet, skipping wait"
        fi

    - name: Get ALB DNS name
      id: alb-dns
      run: |
        DNS_NAME=$(aws cloudformation describe-stacks \
          --stack-name AdminPanelProductionStack \
          --query 'Stacks[0].Outputs[?OutputKey==`FrontendURL`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        echo "alb-dns=$DNS_NAME" >> $GITHUB_OUTPUT

    - name: Health check
      run: |
        # Wait for services to be fully ready
        sleep 60
        
        # Get ALB DNS name
        DNS_NAME=$(aws cloudformation describe-stacks \
          --stack-name AdminPanelProductionStack \
          --query 'Stacks[0].Outputs[?OutputKey==`FrontendURL`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        # Check if DNS_NAME is not empty
        if [ -z "$DNS_NAME" ] || [ "$DNS_NAME" = "None" ]; then
          echo "Error: Could not get DNS name from CloudFormation stack"
          exit 1
        fi
        
        # Extract just the hostname from the URL
        HOSTNAME=$(echo $DNS_NAME | sed 's|https://||')
        
        echo "Testing health endpoints on: $HOSTNAME"
        
        # Health checks for frontend only (skip SSL verification)
        curl -f -k "https://$HOSTNAME/" || exit 1
        curl -f -k "https://$HOSTNAME/api/health" || exit 1

    # GitHub release creation removed due to permissions issue
    # You can manually create releases from GitHub UI if needed

  deployment-failure:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Production Deployment Failed
        run: |
          echo "Production deployment failed - check the logs for details" 